cmake_minimum_required(VERSION 3.12)



project(AclUnity)
set(CMAKE_SHARED_LIBRARY_PREFIX "")

set(ACLUNITY_USE_ACL_SUBDIR false CACHE BOOL "Add ACL via add_subdirectory which allows code parsing of tools")
set(ACLUNITY_IS_AVX false CACHE BOOL "Use AVX, AVX2, BMI1, and BMI2 instructions plus SSE4 tier")
set(ACLUNITY_IS_SSE4 false CACHE BOOL "Use SSE4.2 plus popcnt")

set(ACLUNITY_MAKE_DEBUG false CACHE BOOL "Make a debug executable")

file(GLOB_RECURSE src CONFIGURE_DEPENDS "${PROJECT_SOURCE_DIR}/src/*.cpp")
#The following helps IDEs show these files in the project.
file(GLOB_RECURSE apiHeaders "${PROJECT_SOURCE_DIR}/include*.h")

if (ACLUNITY_USE_ACL_SUBDIR)
	add_subdirectory(acl)
	set(aclHeaders "")
else()
	file(GLOB_RECURSE aclHeaders "${PROJECT_SOURCE_DIR}/acl/includes**.h")
endif()

add_library(AclUnity SHARED ${src} ${apiHeaders} ${aclHeaders})
target_include_directories(AclUnity PUBLIC "${PROJECT_SOURCE_DIR}/include" "${PROJECT_SOURCE_DIR}/acl/includes" "${PROJECT_SOURCE_DIR}/acl/external/rtm/includes")
target_compile_features(AclUnity PUBLIC cxx_std_11)

if (UNIX)
	add_custom_command(TARGET AclUnity POST_BUILD
					COMMAND ${CMAKE_OBJCOPY} "--only-keep-debug" "$<TARGET_FILE:AclUnity>" "$<TARGET_FILE:AclUnity>.debug"
					COMMAND ${CMAKE_STRIP} "--strip-debug" "$<TARGET_FILE:AclUnity>"
					COMMAND ${CMAKE_OBJCOPY} "--add-gnu-debuglink=$<TARGET_FILE:AclUnity>.debug" "$<TARGET_FILE:AclUnity>")
endif()

if (MSVC)
	if (ACLUNITY_IS_AVX)
		set_target_properties(AclUnity PROPERTIES OUTPUT_NAME "AclUnity_AVX")
		target_compile_options(AclUnity PUBLIC "/arch:AVX2" "/FA")
		target_compile_definitions(AclUnity PUBLIC ACL_USE_POPCOUNT)
	elseif (ACLUNITY_IS_SSE4)
		set_target_properties(AclUnity PROPERTIES OUTPUT_NAME "AclUnity_SSE4")
		target_compile_options(AclUnity PUBLIC "/d2archSSE42" "/FA")
		target_compile_definitions(AclUnity PUBLIC ACL_USE_POPCOUNT)
	else()
		add_library(AclUnity SHARED ${src} ${apiHeaders} ${aclHeaders})
		# SSE2 is assumed for MSVC x64
		target_compile_options(AclUnity PUBLIC "/FA")
	endif()
elseif (APPLE AND (CMAKE_OSX_ARCHITECTURES STREQUAL "arm64"))
		set(CMAKE_OSX_DEPLOYMENT_TARGET 11.0)
		target_compile_options(AclUnity PUBLIC "--save-temps=obj")
		target_include_directories(AclUnity PUBLIC "${PROJECT_SOURCE_DIR}/include" "${PROJECT_SOURCE_DIR}/acl/includes" "${PROJECT_SOURCE_DIR}/acl/external/rtm/includes")
elseif (ANDROID)
		set_target_properties( AclUnity PROPERTIES OUTPUT_NAME "AclUnity_Android")
		target_compile_features(AclUnity PUBLIC cxx_std_11)
		target_include_directories(AclUnity PUBLIC "${PROJECT_SOURCE_DIR}/include" "${PROJECT_SOURCE_DIR}/acl/includes" "${PROJECT_SOURCE_DIR}/acl/external/rtm/includes")
elseif (UNIX OR APPLE)
	if (ACLUNITY_IS_AVX)
		set_target_properties(AclUnity PROPERTIES OUTPUT_NAME "AclUnity_AVX")
		target_compile_options(AclUnity PUBLIC "-march=x86-64-v3" "--save-temps=obj" "-masm=intel")
		target_compile_definitions(AclUnity PUBLIC ACL_USE_POPCOUNT)
	elseif (ACLUNITY_IS_SSE4)
		set_target_properties(AclUnity PROPERTIES OUTPUT_NAME "AclUnity_SSE4")
		target_compile_options(AclUnity PUBLIC "-march=x86-64-v2" "--save-temps=obj" "-masm=intel")
		target_compile_definitions(AclUnity PUBLIC ACL_USE_POPCOUNT)
	else()
		target_compile_options(AclUnity PUBLIC "-march=x86-64" "--save-temps=obj" "-masm=intel")
	endif()
endif()

if (ACLUNITY_MAKE_DEBUG)
	add_executable(debug_main "tests/debug_main.cpp")
	if (APPLE AND (CMAKE_OSX_ARCHITECTURES STREQUAL "arm64"))
		target_link_libraries(debug_main AclUnity)
		target_compile_definitions(AclUnity PUBLIC ACL_ON_ASSERT_THROW)
	elseif (MSVC OR UNIX)
		if (ACLUNITY_IS_AVX)
			target_link_libraries(debug_main AclUnity_AVX)
			target_compile_definitions(AclUnity_AVX PUBLIC ACL_ON_ASSERT_THROW)
		elseif (ACLUNITY_IS_SSE4)
			target_link_libraries(debug_main AclUnity_SSE4)
			target_compile_definitions(AclUnity_SSE4 PUBLIC ACL_ON_ASSERT_THROW)
		else()
			target_link_libraries(debug_main AclUnity)
			target_compile_definitions(AclUnity PUBLIC ACL_ON_ASSERT_THROW)
		endif()
	endif()
endif()
